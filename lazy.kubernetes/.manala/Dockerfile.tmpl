ARG DEBIAN=bullseye

########
# Base #
########

FROM debian:${DEBIAN}-slim as base

ARG DEBIAN
ARG USER_ID=1000
ARG GROUP_ID=1000
ARG GOSU_VERSION=1.14
ARG GOMPLATE_VERSION=3.10.0

# The 'container' environment variable tells systemd that it's running inside a
# Docker container environment.
# It's also internally used for checking we're running inside a container.
ENV container="docker"

RUN \
    # Backports
    printf "deb http://deb.debian.org/debian ${DEBIAN}-backports main" > /etc/apt/sources.list.d/backports.list \
    && apt-get update \
    && apt-get install --yes --no-install-recommends \
        s6 \
        sudo \
        curl \
        ca-certificates \
        gnupg \
        libarchive-tools bzip2 \
        bash-completion \
        git \
        make \
        less \
        vim \
    # User
    && addgroup --gid ${GROUP_ID} lazy \
    && adduser --home /home/lazy --shell /bin/bash --uid ${USER_ID} --gecos lazy --ingroup lazy --disabled-password lazy \
    && mkdir -p /run/user/${USER_ID} && chown lazy:lazy /run/user/${USER_ID} \
    && printf "lazy ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/lazy \
    # Gosu
    && curl -sSL https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-{{ include "arch_map" (dict "amd64" "amd64" "arm64" "arm64") }} \
        -o /usr/local/bin/gosu \
    && chmod +x /usr/local/bin/gosu \
    # Gomplate
    && curl -sSL https://github.com/hairyhenderson/gomplate/releases/download/v${GOMPLATE_VERSION}/gomplate_linux-{{ include "arch_map" (dict "amd64" "amd64" "arm64" "arm64") }} \
        -o /usr/local/bin/gomplate \
    && chmod +x /usr/local/bin/gomplate \
    # Bash completion
    && mkdir -p /etc/bash_completion.d \
    # Oh My Bash
    && git clone https://github.com/ohmybash/oh-my-bash.git /usr/local/share/oh-my-bash

##########
# System #
##########

FROM base AS system

ARG DEBIAN
ARG VIM_GNUPG_VERSION=2.7.1

RUN \
    apt-get install --yes --no-install-recommends \
        jq \
    # Vim Gnupg
    && mkdir -p /usr/share/vim/vimfiles/pack/plugins/start/vim-gnupg \
    && curl -sSL https://github.com/jamessan/vim-gnupg/releases/download/v${VIM_GNUPG_VERSION}/vim-gnupg-v${VIM_GNUPG_VERSION}.tar.gz \
        | bsdtar -xvf - -C /usr/share/vim/vimfiles/pack/plugins/start/vim-gnupg --strip-components=1 vim-gnupg-${VIM_GNUPG_VERSION} \
    && printf "let g:GPGPreferSymmetric = 1" >> /etc/vim/vimrc

# Kubectl
{{ $kubectl := .Vars.system.kubectl -}}
RUN \
    curl -sSL https://storage.googleapis.com/kubernetes-release/release/v{{ $kubectl.version }}/bin/linux/{{ include "arch_map" (dict "amd64" "amd64" "arm64" "arm64") }}/kubectl \
        -o /usr/local/bin/kubectl \
    && chmod +x /usr/local/bin/kubectl \
    # Bash completion
    && kubectl completion bash > /etc/bash_completion.d/kubectl

{{ $helm := .Vars.system.helm -}}
{{ if $helm.version -}}
# Helm
RUN \
    curl -sSL https://get.helm.sh/helm-v{{ $helm.version }}-linux-{{ include "arch_map" (dict "amd64" "amd64" "arm64" "arm64") }}.tar.gz \
        | bsdtar -xvf - -C /usr/local/bin --strip-components=1 linux-{{ include "arch_map" (dict "amd64" "amd64" "arm64" "arm64") }}/helm \
    # Bash completion
    && helm completion bash > /etc/bash_completion.d/helm \
    # Bash aliases
    && printf "alias h='helm'\ncomplete -o default -F __start_helm h\n" > /etc/profile.d/helm.sh

{{ end -}}

{{ $k9s := .Vars.system.k9s -}}
{{ if $k9s.version -}}
# K9s
RUN \
    curl -sSL https://github.com/derailed/k9s/releases/download/v{{ $k9s.version }}/k9s_Linux_{{ include "arch_map" (dict "amd64" "x86_64" "arm64" "arm64") }}.tar.gz \
        | bsdtar -xvf - -C /usr/local/bin k9s

{{ end -}}

{{ $stern := .Vars.system.stern -}}
{{ if $stern.version -}}
# Stern
RUN \
    curl -sSL https://github.com/stern/stern/releases/download/v{{ $stern.version }}/stern_{{ $stern.version }}_linux_{{ include "arch_map" (dict "amd64" "amd64" "arm64" "arm64") }}.tar.gz \
        | bsdtar -xvf - -C /usr/local/bin --strip-components=1 stern_{{ $stern.version }}_linux_{{ include "arch_map" (dict "amd64" "amd64" "arm64" "arm64") }}/stern \
    # Bash completion
    && stern --completion=bash > /etc/bash_completion.d/stern

{{ end -}}

{{ $kube_prompt := .Vars.system.kube_prompt -}}
{{ if $kube_prompt.version -}}
# Kube Prompt
RUN \
    curl -sSL https://github.com/c-bata/kube-prompt/releases/download/v{{ $kube_prompt.version }}/kube-prompt_v{{ $kube_prompt.version }}_linux_{{ include "arch_map" (dict "amd64" "amd64" "arm64" "arm64") }}.zip \
        | bsdtar -xvf - -C /usr/local/bin \
    && chmod +x /usr/local/bin/kube-prompt

{{ end -}}

{{ $popeye := .Vars.system.popeye -}}
{{ if $popeye.version -}}
# Popeye
RUN \
    curl -sSL https://github.com/derailed/popeye/releases/download/v{{ $popeye.version }}/popeye_Linux_{{ include "arch_map" (dict "amd64" "x86_64" "arm64" "arm64") }}.tar.gz \
        | bsdtar -xvf - -C /usr/local/bin popeye

{{ end -}}

{{ $knsk := .Vars.system.knsk -}}
{{ if $knsk.version -}}
# Knsk
RUN \
    curl -sSL https://github.com/thyarles/knsk/archive/refs/tags/v{{ $knsk.version }}.tar.gz \
        | bsdtar -xvf - -C /usr/local/bin --strip-components=1 knsk-{{ $knsk.version }}/knsk.sh

{{ end -}}

{{ $vault := .Vars.system.vault -}}
{{ if $vault.version -}}
# Vault
RUN \
    curl -sSL https://releases.hashicorp.com/vault/{{ $vault.version }}/vault_{{ $vault.version }}_linux_{{ include "arch_map" (dict "amd64" "amd64" "arm64" "arm64") }}.zip \
        | bsdtar -xvf - -C /usr/local/bin \
    && chmod +x /usr/local/bin/vault \
    # Bash completion
    && printf "complete -C /usr/local/bin/vault vault" > /etc/bash_completion.d/vault

{{ end -}}

{{ $rclone := .Vars.system.rclone -}}
{{ if $rclone.version -}}
# Rclone
RUN \
    curl -sSL https://downloads.rclone.org/v{{ $rclone.version }}/rclone-v{{ $rclone.version }}-linux-{{ include "arch_map" (dict "amd64" "amd64" "arm64" "arm64") }}.zip \
        | bsdtar -xvf - -C /usr/local/bin --strip-components=1 rclone-v{{ $rclone.version }}-linux-{{ include "arch_map" (dict "amd64" "amd64" "arm64" "arm64") }}/rclone \
    && chmod +x /usr/local/bin/rclone \
    # Bash completion
    && rclone genautocomplete bash /etc/bash_completion.d/rclone

{{ end -}}

{{ $openstack := .Vars.system.openstack -}}
{{ if $openstack.version -}}
# Openstack
RUN \
    BUILD_PACKAGES="pipx python3-venv gcc libpython3-dev" \
    export PIPX_HOME="/usr/local" \
    export PIPX_BIN_DIR="/usr/local/bin" \
    && apt-get install --yes --no-install-recommends \
      python3 \
      ${BUILD_PACKAGES} \
    && pipx install python-openstackclient=={{ $openstack.version }} \
    && apt-get purge --yes --autoremove ${BUILD_PACKAGES} \
    # Bash completion
    && openstack complete > /etc/bash_completion.d/openstack

{{ end -}}

{{ $swift := .Vars.system.swift -}}
{{ if $swift.version -}}
# Swift
RUN \
    BUILD_PACKAGES="pipx python3-venv gcc libpython3-dev" \
    export PIPX_HOME="/usr/local" \
    export PIPX_BIN_DIR="/usr/local/bin" \
    && apt-get install --yes --no-install-recommends \
      python3 \
      ${BUILD_PACKAGES} \
    && pipx install python-swiftclient=={{ $swift.version }} \
    {{ if $swift.keystone.version -}}
    && pipx inject python-swiftclient python-keystoneclient=={{ $swift.keystone.version }} \
    {{ end -}}
    && apt-get purge --yes --autoremove ${BUILD_PACKAGES}

{{ end -}}

{{ $scw := .Vars.system.scw -}}
{{ if $scw.version -}}
# Scaleway cli
RUN \
    curl -sSL https://github.com/scaleway/scaleway-cli/releases/download/v{{ $scw.version }}/scaleway-cli_{{ $scw.version }}_linux_{{ include "arch_map" (dict "amd64" "amd64" "arm64" "arm64") }} \
        -o /usr/local/bin/scw \
    && chmod +x /usr/local/bin/scw \
    # Bash completion
    && scw autocomplete script shell=/bin/bash > /etc/bash_completion.d/scw

{{ end -}}
