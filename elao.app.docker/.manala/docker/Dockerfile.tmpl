{{- with .Vars.system -}}

# syntax=docker/dockerfile:1

# Init system (none|sysv|openrc|systemd)
ARG MANALA_INIT="none"
# Provision system (none|ansible)
ARG MANALA_PROVISION="none"

##########
# System #
##########

FROM debian:{{ .version }}-slim AS system

LABEL org.opencontainers.image.authors="Elao <contact@elao.com>"

ARG DEBIAN_FRONTEND="noninteractive"

ARG MANALA_HOST_OS="linux"
ARG MANALA_HOST_DIR
ARG MANALA_USER="app"
ARG MANALA_USER_ID="1000"
ARG MANALA_USER_COMMENT="App"
ARG MANALA_GROUP="app"
ARG MANALA_GROUP_ID="1000"

ENV MANALA_HOST_OS="${MANALA_HOST_OS}"
ENV MANALA_HOST_DIR="${MANALA_HOST_DIR}"

# The 'container' environment variable is internally used for
# checking we're running inside a container.
{{- if le (.version|int) 11 }}
# It also tells systemd that it's running inside a Docker container environment.
{{- end }}
ENV container="docker"

SHELL ["/bin/bash", "-e", "-o", "pipefail", "-c"]

RUN <<EOF
apt-get --quiet update
apt-get --quiet --yes --purge --autoremove upgrade
apt-get --quiet --yes --no-install-recommends --verbose-versions install \
    ca-certificates \
    curl \
    gnupg \
    make \
    socat \
    sudo
# User
groupadd --gid ${MANALA_GROUP_ID} ${MANALA_GROUP}
useradd --uid ${MANALA_USER_ID} --gid ${MANALA_GROUP_ID} --inactive -1 --create-home --home-dir /home/${MANALA_USER} --shell /bin/bash --comment ${MANALA_USER_COMMENT} ${MANALA_USER}
echo "${MANALA_USER} ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/${MANALA_USER}
EOF

{{ if .goss.version -}}
# Goss
RUN <<EOF
curl -sSLf "https://github.com/goss-org/goss/releases/download/v{{ .goss.version }}/goss-linux-{{ include "arch_map" (dict "amd64" "amd64" "arm64" "arm64") }}" \
    --output /usr/local/bin/goss
chmod +x /usr/local/bin/goss
EOF

{{ end -}}

WORKDIR /srv/app

########
# Init #
########

# None
FROM system AS init-none

STOPSIGNAL SIGKILL

CMD ["sleep", "9999999"]

# SysV
FROM system AS init-sysv

RUN <<EOF
{{- if le (.version|int) 12 }}
# Work around chroot check to avoid sysvinit restart after install
mv /usr/bin/ischroot /usr/bin/ischroot_
ln -s /bin/true /usr/bin/ischroot
{{- end }}
apt-get --quiet update
apt-get --quiet --yes --purge --autoremove upgrade
apt-get --quiet --yes --no-install-recommends --verbose-versions install \
    sysvinit-core
{{- if le (.version|int) 12 }}
mv /usr/bin/ischroot_ /usr/bin/ischroot
{{- end }}
# Disable getty
sed -i "s/^\([[:digit:]]:\)/#\1/g" /etc/inittab
# Shutdown on SIGINT
sed -i "s/^\(ca:.*\)/ca:12345:ctrlaltdel:\/sbin\/shutdown -h now/g" /etc/inittab
# Don't bring networking down right before halting system
sed -i "/^NETDOWN=/s/yes/no/" /etc/default/halt
# Useless services
insserv --remove \
{{- if eq (.version|int) 13 }}
    kmod \
    udev \
{{- end }}
    bootlogs \
    bootmisc.sh \
    brightness \
    checkfs.sh \
    checkroot-bootclean.sh \
    checkroot.sh \
    hostname.sh \
    hwclock.sh \
    mount-configfs \
    mountall-bootclean.sh \
    mountall.sh \
    mountdevsubfs.sh \
    mountkernfs.sh \
    mountnfs-bootclean.sh \
    mountnfs.sh \
    rc.local \
    rmnologin \
    sendsigs \
    umountfs \
    umountnfs.sh \
    umountroot \
    urandom
# Block systemd replacement
printf "\
Package: systemd-sysv\n\
Pin: release *\n\
Pin-Priority: -1\n\
" > /etc/apt/preferences
EOF

STOPSIGNAL SIGINT

CMD ["/sbin/init"]

# OpenRC
FROM system AS init-openrc

RUN <<EOF
rm -f /etc/init.d/hwclock.sh
apt-get --quiet update
apt-get --quiet --yes --purge --autoremove upgrade
apt-get --quiet --yes --no-install-recommends --verbose-versions install \
    openrc
EOF

STOPSIGNAL SIGINT

CMD ["/sbin/openrc-init"]

# Systemd
FROM system AS init-systemd

RUN <<EOF
# Packages
apt-get --quiet update
apt-get --quiet --yes --purge --autoremove upgrade
apt-get --quiet --yes --no-install-recommends --verbose-versions install \
    systemd dbus
    {{- if gt (.version|int) 12 }} \
    libbpf1
    {{- end }}
# Default target
systemctl set-default multi-user.target
# Systemd
install --verbose --mode 0755 --directory /etc/systemd/system.conf.d
printf "\
[Manager]\n\
ShowStatus=no\n\
" > /etc/systemd/system.conf.d/docker.conf
# Journald
install --verbose --mode 0755 --directory /etc/systemd/journald.conf.d
printf "\
[Journal]\n\
ForwardToConsole=yes\n\
" > /etc/systemd/journald.conf.d/docker.conf
{{- if gt (.version|int) 11 }}
# Disable Journald firewall
sed -ri '/^IPAddressDeny/d' \
    /lib/systemd/system/systemd-journald.service
{{- end }}
# Disable halt umounting, that would require SYS_ADMIN capability
sed -i 's/umount\.target\s*//g' \
    /lib/systemd/system/systemd-halt.service
{{- if eq (.version|int) 13 }}
# See: https://salsa.debian.org/systemd-team/systemd/-/commit/d3f9a1f928a9f8ae6d917ec06cff651a03dfb8dc
sed -i '/^d \/run\/lock 0755 root root -$/d' \
    /usr/lib/tmpfiles.d/legacy.conf
{{- end }}
# Cleanup units
find /etc/systemd/system -mindepth 1 \
    ! -name default.target \
    -exec rm -rfv {} +
find /lib/systemd/system -mindepth 1 -type f,l \
    ! -name basic.target \
    ! -name final.target \
    ! -name halt.target \
    ! -name multi-user.target \
    {{- if eq (.version|int) 13 }}
    ! -name run-lock.mount \
    {{- end }}
    ! -name shutdown.target \
    ! -name sysinit.target \
    ! -name systemd-halt.service \
    ! -name systemd-journald.service \
    ! -name systemd-journald.socket \
    ! -name systemd-tmpfiles-setup.service \
    ! -name timers.target \
    -exec rm -rfv {} +
EOF

COPY \
    etc/systemd/system/docker-bridge.service \
    etc/systemd/system/ssh-agent-bridge.service \
    /etc/systemd/system/

RUN <<EOF
systemctl enable \
    docker-bridge \
    ssh-agent-bridge
EOF

STOPSIGNAL SIGRTMIN+3

CMD ["/lib/systemd/systemd"]

#############
# Provision #
#############

# None
FROM init-${MANALA_INIT} AS provision-none

# Ansible
FROM init-${MANALA_INIT} AS provision-ansible

ARG ANSIBLE_VERSION="11.11.0"
ARG MANALA_PROVISION_LIMIT
ARG SYMFONY_IDE

# Locale
ENV LANG="{{ .locales.default }}"

{{- if eq (.version|int) 11 }}
COPY --from=python:3.11.2-slim-bullseye /usr/local/bin/python3.11 /usr/local/bin/
COPY --from=python:3.11.2-slim-bullseye /usr/local/lib/libpython3.11.so.1.0 /usr/local/lib/
COPY --from=python:3.11.2-slim-bullseye /usr/local/lib/python3.11/ /usr/local/lib/python3.11/
{{- end }}
RUN <<EOF
apt-get --quiet update
apt-get --quiet --yes --purge --autoremove upgrade
apt-get --quiet --yes --no-install-recommends --verbose-versions install \
    python3 \
    python3-apt \
{{- if eq (.version|int) 11 }}
    python3-pip \
    libexpat1-dev
python3.11 -m pip --no-cache-dir --disable-pip-version-check install --root-user-action=ignore \
    python-debian==0.1.39 \
    ansible==${ANSIBLE_VERSION}
apt-get --quiet --yes --autoremove purge \
    libexpat1-dev
{{- else }}
    pipx
PIPX_HOME="/usr/local/pipx" PIPX_BIN_DIR="/usr/local/bin" \
    pipx install ansible==${ANSIBLE_VERSION} \
        --include-deps --pip-args="--no-cache-dir" --verbose
rm -rf ~/.cache/pip /usr/local/pipx/.cache /usr/local/pipx/logs
{{- end }}
install --verbose --mode 0755 --directory /etc/ansible
printf "\
[defaults]\n\
force_color = True\n\
display_skipped_hosts = False\n\
retry_files_enabled = False\n\
callback_result_format = yaml\n\
inject_facts_as_vars = False\n\
check_mode_markers = True\n\
interpreter_python = auto_silent\n\
[ssh_connection]\n\
pipelining = True\n\
[privilege_escalation]\n\
become_flags = -E\n\
" > /etc/ansible/ansible.cfg
EOF

COPY Makefile      ./.manala/
COPY ansible/      ./.manala/ansible/
COPY certificates/ ./.manala/certificates/

RUN <<EOF
if [ -n "${MANALA_PROVISION_LIMIT}" ]; then
    su app -s /usr/bin/make -- \
        --silent \
        --directory .manala \
        provision \
        LIMIT=${MANALA_PROVISION_LIMIT} ;
fi
EOF

#######
# App #
#######

FROM provision-${MANALA_PROVISION} AS app

{{- end }}
