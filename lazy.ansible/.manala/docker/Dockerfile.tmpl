# syntax=docker/dockerfile:1

########
# Base #
########

FROM debian:trixie-slim

ARG DEBIAN_FRONTEND="noninteractive"

ARG MANALA_USER_ID="1000"
ARG MANALA_GROUP_ID="1000"

ARG GOMPLATE_VERSION="4.3.3"
ARG DIRENV_VERSION="2.37.1"
ARG JQ_VERSION="1.7.1"
ARG YQ_VERSION="4.48.1"
ARG STARSHIP_VERSION="1.24.0"
ARG FZF_VERSION="0.66.1"

# The 'container' environment variable tells systemd that it's running inside a
# Docker container environment.
# It's also internally used for checking we're running inside a container.
ENV container="docker"

# Starship
ENV STARSHIP_CONFIG=/etc/starship/starship.toml

SHELL ["/bin/bash", "-e", "-o", "pipefail", "-c"]

RUN <<EOF
# Packages
apt-get --quiet update
apt-get --quiet --yes --purge --autoremove upgrade
apt-get --quiet --yes --no-install-recommends --verbose-versions install \
    bzip2 \
    ca-certificates \
    curl \
    git \
    gnupg \
    gosu \
    less \
    libarchive-tools \
    make \
    rsync \
    s6 \
    socat \
    sudo \
    vim \
    zsh
{{- if ne .Vars.system.locale "C.UTF-8" }}
# Locale
apt-get --quiet --yes --no-install-recommends --verbose-versions install \
    locales
sed -i "/^# *{{ .Vars.system.locale }}\b/s/^# *//" /etc/locale.gen
dpkg-reconfigure locales
{{- end }}
# User
addgroup --gid ${MANALA_GROUP_ID} lazy
adduser --home /home/lazy --shell /bin/zsh --uid ${MANALA_USER_ID} --gecos lazy --ingroup lazy --disabled-password lazy
install --verbose --mode 0755 --group lazy --owner lazy --directory /run/user/${MANALA_USER_ID}
echo "lazy ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/lazy
# Gomplate
curl -sSLf "https://github.com/hairyhenderson/gomplate/releases/download/v${GOMPLATE_VERSION}/gomplate_linux-{{ include "arch_map" (dict "amd64" "amd64" "arm64" "arm64") }}" \
    --output /usr/local/bin/gomplate
chmod +x /usr/local/bin/gomplate
# Direnv
curl -sSLf "https://github.com/direnv/direnv/releases/download/v${DIRENV_VERSION}/direnv.linux-{{ include "arch_map" (dict "amd64" "amd64" "arm64" "arm64") }}" \
    --output /usr/local/bin/direnv
chmod +x /usr/local/bin/direnv
# Jq
curl -sSLf "https://github.com/jqlang/jq/releases/download/jq-${JQ_VERSION}/jq-linux-{{ include "arch_map" (dict "amd64" "amd64" "arm64" "arm64") }}" \
    --output /usr/local/bin/jq
chmod +x /usr/local/bin/jq
# Yq
curl -sSLf "https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/yq_linux_{{ include "arch_map" (dict "amd64" "amd64" "arm64" "arm64") }}" \
    --output /usr/local/bin/yq
chmod +x /usr/local/bin/yq
# Oh My Zsh
git clone https://github.com/ohmyzsh/ohmyzsh.git /usr/local/share/oh-my-zsh
# See: https://github.com/ohmyzsh/ohmyzsh/issues/11995
git clone https://github.com/zsh-users/zsh-autosuggestions.git /usr/local/share/oh-my-zsh/custom/plugins/zsh-autosuggestions
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git /usr/local/share/oh-my-zsh/custom/plugins/zsh-syntax-highlighting
echo "ZDOTDIR=/etc/zsh" > /etc/zsh/zshenv
# Starship
curl -sSLf "https://github.com/starship/starship/releases/download/v${STARSHIP_VERSION}/starship-{{ include "arch_map" (dict "amd64" "x86_64" "arm64" "aarch64") }}-unknown-linux-musl.tar.gz" \
    | bsdtar -xvf - -C /usr/local/bin
echo "Defaults env_keep += STARSHIP_CONFIG" > /etc/sudoers.d/starship
# Fzf
curl -sSLf "https://github.com/junegunn/fzf/releases/download/v${FZF_VERSION}/fzf-${FZF_VERSION}-linux_{{ include "arch_map" (dict "amd64" "amd64" "arm64" "arm64") }}.tar.gz" \
    | bsdtar -xvf - -C /usr/local/bin
chmod +x /usr/local/bin/fzf
# Clean
rm -rf /var/lib/apt/lists/*
EOF

# Locale
ENV LANG="{{ .Vars.system.locale }}"

##########
# System #
##########

ENV PIPX_HOME="/usr/local/pipx"
ENV PIPX_BIN_DIR="/usr/local/bin"

{{ $apt := .Vars.system.apt -}}

RUN <<EOF
apt-get --quiet update
apt-get --quiet --yes --no-install-recommends --verbose-versions install \
    openssh-client \
    pipx \
    python3 \
    shellcheck \
    sshpass
    {{- if $apt.packages }} \
    {{- range $i, $package := $apt.packages }}
    {{- if $i }} \{{- end }}
    {{ $package }}
    {{- end }}
    {{- end }}
# Sudo
echo "Defaults env_keep += \"PIPX_*\"" > /etc/sudoers.d/pipx
# Clean
rm -rf /var/lib/apt/lists/*
EOF

{{ if .Vars.system.docker -}}
# Docker
RUN <<EOF
curl -sSLf https://download.docker.com/linux/debian/gpg \
    --output /etc/apt/keyrings/docker.asc
printf "\
Types: deb\n\
URIs: https://download.docker.com/linux/debian\n\
Suites: {{ include "os_release" "VERSION_CODENAME" }}\n\
Components: stable\n\
Signed-By: /etc/apt/keyrings/docker.asc\n\
" > /etc/apt/sources.list.d/docker.sources
apt-get --quiet update
apt-get --quiet --yes --no-install-recommends --verbose-versions install \
    docker-ce-cli
# Clean
rm -rf /var/lib/apt/lists/*
EOF

{{ end -}}

{{ $ansible := .Vars.system.ansible -}}
# Ansible
RUN <<EOF
pipx install --pip-args="--no-cache-dir" \
    ansible-core=={{ $ansible.version }}
{{- if $ansible.dependencies }}
pipx inject --pip-args="--no-cache-dir" ansible-core \
    {{- range $i, $dependency := $ansible.dependencies }}
    {{- if $i }} \{{- end }}
    {{ $dependency }}
    {{- end }}
{{- end }}
EOF

{{ $ansibleLint := index .Vars.system "ansible-lint" -}}
{{ if $ansibleLint.version -}}
# Ansible Lint
RUN <<EOF
BUILD_PACKAGES=( \
    libpython3-dev gcc \
)
apt-get --quiet update
apt-get --quiet --yes --no-install-recommends --verbose-versions install \
    "${BUILD_PACKAGES[@]}"
pipx install --pip-args="--no-cache-dir" \
    ansible-lint[lock]=={{ $ansibleLint.version }}
{{- if $ansibleLint.dependencies }}
pipx inject --pip-args="--no-cache-dir" ansible-lint \
    {{- range $i, $dependency := $ansibleLint.dependencies }}
    {{- if $i }} \{{- end }}
    {{ $dependency }}
    {{- end }}
{{- end }}
# Clean
apt-get --quiet --yes --autoremove purge \
    "${BUILD_PACKAGES[@]}"
rm -rf /var/lib/apt/lists/*
EOF

{{ end -}}

{{ $ansibleCreator := index .Vars.system "ansible-creator" -}}
{{ if $ansibleCreator.version -}}
# Ansible Creator
RUN <<EOF
pipx install --pip-args="--no-cache-dir" \
    ansible-creator=={{ $ansibleCreator.version }}
EOF

{{ end -}}

{{ $molecule := .Vars.system.molecule -}}
{{ if $molecule.version -}}
# Molecule
RUN <<EOF
pipx install --pip-args="--no-cache-dir" \
    molecule=={{ $molecule.version }}
{{- if $molecule.dependencies }}
pipx inject --pip-args="--no-cache-dir" molecule \
    {{- range $i, $dependency := $molecule.dependencies }}
    {{- if $i }} \{{- end }}
    {{ $dependency }}
    {{- end }}
{{- end }}
EOF

{{ end -}}

{{ $terraform := .Vars.system.terraform -}}
{{ if $terraform.version -}}
# Terraform
RUN <<EOF
curl -sSLf "https://releases.hashicorp.com/terraform/{{ $terraform.version }}/terraform_{{ $terraform.version }}_linux_{{ include "arch_map" (dict "amd64" "amd64" "arm64" "arm64") }}.zip" \
    | bsdtar -xvf - -C /usr/local/bin
chmod +x /usr/local/bin/terraform
EOF

{{ end -}}

{{ $gcloud := .Vars.system.gcloud -}}
{{ if $gcloud.version -}}
# Google Cloud cli
ENV PATH="/usr/local/google-cloud-sdk/bin:${PATH}"
ENV CLOUDSDK_CORE_DISABLE_USAGE_REPORTING="1"
ENV CLOUDSDK_COMPONENT_MANAGER_DISABLE_UPDATE_CHECK="1"
RUN <<EOF
apt-get --quiet update
apt-get --quiet --yes --no-install-recommends --verbose-versions install \
    python3
curl -sSLf "https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-{{ $gcloud.version }}-linux-{{ include "arch_map" (dict "amd64" "x86_64" "arm64" "arm") }}.tar.gz" \
    | bsdtar -xf - -C /usr/local
# Profile
touch /etc/profile.d/gcloud.sh
/usr/local/google-cloud-sdk/install.sh \
    --rc-path /etc/profile.d/gcloud.sh \
    --command-completion true \
    --path-update true \
    {{- if $gcloud.components }}
    --additional-components {{ $gcloud.components | join " " }} \
    {{- end }}
    --quiet
rm -rf /etc/profile.d/gcloud.sh.backup
# Clean
rm -rf /var/lib/apt/lists/*
EOF

{{ end -}}

# Run
COPY docker/entrypoint.sh /
ENTRYPOINT ["/entrypoint.sh"]
CMD ["zsh"]
