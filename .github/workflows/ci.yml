name: CI

on:
  workflow_dispatch: ~
  push:
    branches:
      - master
    paths:
      - 'docs/**'
      - '.github/**'
      - '**/README.md'
  pull_request:
    paths:
      - 'docs/**'
      - '.github/**'
      - '**/README.md'

jobs:

  ci:
    name: CI
    runs-on: ubuntu-latest

    env:
      working-directory: ./docs/app
    defaults:
      run:
        # https://github.community/t/use-working-directory-for-entire-job/16747/9
        working-directory: ${{ env.working-directory }}

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2

      # https://github.com/actions/setup-node
      - name: 'Setup node'
        uses: actions/setup-node@v2
        with:
            node-version: 16

      - name: 'Setup PHP'
        uses: shivammathur/setup-php@v2
        with:
          coverage: "none"
          extensions: "json"
          ini-values: "memory_limit=-1"
          php-version: "8.0"

      - name: 'Determine composer cache directory'
        id: composer-cache
        run: echo "directory=$(composer config cache-dir)" >> $GITHUB_OUTPUT

      - name: 'Cache composer dependencies'
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.directory }}
          key: composer-${{ hashFiles('docs/app/composer.lock') }}
          restore-keys: composer-

      - name: 'Cache NPM dependencies'
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: node-${{ hashFiles('docs/app/package-lock.json') }}
          restore-keys: node-

      - name: 'Install dependencies'
        id: deps
        run: |
          echo "::group::composer install"
            composer install --no-progress --no-suggest --ansi
          echo "::endgroup::"

          echo "::group::npm install"
            npm install --color=always --no-progress
          echo "::endgroup::"

      - name: 'Warmup'
        run: |
          npx encore production --color
          bin/console cache:clear --ansi
          bin/console cache:warmup --ansi
        env:
          APP_ENV: prod

      - name: 'Composer validate'
        if: always() && steps.deps.outcome == 'success'
        run: composer validate --no-check-publish --ansi --no-interaction

      - name: 'Lint YAML'
        if: always() && steps.deps.outcome == 'success'
        run: bin/console lint:yaml config --parse-tags --ansi --no-interaction

      - name: 'Lint Twig'
        if: always() && steps.deps.outcome == 'success'
        run: bin/console lint:twig templates --show-deprecations --ansi --no-interaction

      - name: 'Lint Parameters and Services'
        if: always() && steps.deps.outcome == 'success'
        run: bin/console lint:container --ansi --no-interaction

      - name: 'PHP CS Fixer'
        if: always() && steps.deps.outcome == 'success'
        run: vendor/bin/php-cs-fixer fix --dry-run --diff

      - name: 'Check static build'
        if: always() && steps.deps.outcome == 'success'
        run: bin/console stenope:build --no-interaction -vv --ansi
        env:
          APP_ENV: prod
