{{- define "pod_label" -}}
    {{- $system := . -}}
    {{- $label := list "integration" "app" -}}
    {{- if $system.mysql.version -}}
        {{- $label = concat $label (list "mysql" $system.mysql.version) -}}
    {{- else if $system.mariadb.version -}}
        {{- $label = concat $label (list "mariadb" $system.mariadb.version) -}}
    {{- end -}}
    {{- if $system.elasticsearch.version -}}
        {{- $elasticsearch := mergeOverwrite (dict "plugins" list) $system.elasticsearch -}}
        {{- $label = concat $label (list "elasticsearch" $system.elasticsearch.version) $elasticsearch.plugins -}}
    {{- end -}}
    {{- regexReplaceAll "[^[:alnum:]-]" ($label | join "-") "-" -}}
{{- end -}}

{{- define "node" -}}
    {{- $node := mergeOverwrite (dict "label" "" "env" dict "app" "" "junit" "" "artifacts" "" "tasks" list "parallel" false "shell" "" "warn" false) .node -}}
    {{- $parallel_task := get . "parallel_task" -}}

    {{- /* --- Cache dir by app --- */ -}}
    {{- if not (empty $node.app) -}}
      {{- $node = mergeOverwrite $node (dict "env" (set $node.env "XDG_CACHE_HOME" (printf "${appCache}/%s" $node.app))) -}}
    {{- end -}}

    {{- $indent := 0 -}}
    {{- $indent_parallel_task := 0 -}}
    {{- $indent_env := 0 -}}
    {{- $indent_dir := 0 -}}
    {{- $indent_try := 0 -}}

    {{- /* --- Parallel Task / Open --- */ -}}
    {{- if not (empty $parallel_task) -}}
      {{- $indent_parallel_task = $indent -}}
      {{- $indent = (add $indent 4 | int) -}}
      {{- include "node_parallel_task_open" $node | nindent $indent_parallel_task -}}
    {{- end -}}

        {{- /* --- Env / Open --- */ -}}
        {{- if not (empty $node.env) -}}
          {{- $indent_env = $indent -}}
          {{- $indent = (add $indent 4 | int) -}}
          {{- include "node_env_open" $node | nindent $indent_env -}}
        {{- end -}}

            {{- /* --- Dir / Open --- */ -}}
            {{- if not (empty $node.app) -}}
              {{- $indent_dir = $indent -}}
              {{- $indent = (add $indent 4 | int) -}}
              {{- include "node_dir_open" $node | nindent $indent_dir -}}
            {{- end -}}

                {{- /* --- Try / Open --- */ -}}
                {{- if or (not (empty $node.junit)) (not (empty $node.artifacts)) -}}
                  {{- $indent_try = $indent -}}
                  {{- $indent = (add $indent 4 | int) -}}
                  {{- include "node_try_open" $node | nindent $indent_try -}}
                {{- end -}}

                    {{- if not (empty $node.tasks) -}}
                        {{- include "node_tasks" $node | trim | nindent $indent -}}
                    {{- else if not (empty $node.shell) -}}
                        {{- include "node_shell" $node | nindent $indent -}}
                    {{- end -}}

                {{- /* --- Try / Close --- */ -}}
                {{- if or (not (empty $node.junit)) (not (empty $node.artifacts)) }}
                  {{- include "node_try_close" $node | nindent $indent_try }}
                {{- end -}}

            {{- /* --- Dir / Close --- */ -}}
            {{- if not (empty $node.app) }}
              {{- include "node_dir_close" $node | nindent $indent_dir }}
            {{- end -}}

        {{- /* --- Env / Close --- */ -}}
        {{- if not (empty $node.env) }}
          {{- include "node_env_close" $node | nindent $indent_env }}
        {{- end -}}

    {{- /* --- Parallel Task / Close --- */ -}}
    {{- if not (empty $parallel_task) }}
      {{- include "node_parallel_task_close" $node | nindent $indent_parallel_task }}
    {{- end -}}

{{- end -}}

{{- define "node_parallel_task_open" -}}
    {{- $node := . -}}
'{{ include "node_label" $node }}': {
{{- end -}}

{{- define "node_parallel_task_close" -}}
}
{{- end -}}

{{- define "node_env_open" -}}
    {{- $node := . -}}
    {{- $env := list -}}
withEnv([
    {{- range $key, $value := $node.env -}}
        {{- if not (kindIs "invalid" $value) -}}
            {{- $env = append $env (print "\"" $key "=" ($value | toString) "\"") -}}
        {{- end -}}
    {{- end -}}
    {{- $env | join ", " -}}
]) {
{{- end -}}

{{- define "node_env_close" -}}
}
{{- end -}}

{{- define "node_dir_open" -}}
    {{- $node := . -}}
dir('{{ $node.app }}') {
{{- end -}}

{{- define "node_dir_close" -}}
}
{{- end -}}

{{- define "node_try_open" -}}
try {
{{- end -}}

{{- define "node_try_close" -}}
    {{- $node := . -}}
} finally {
    {{- if not (empty $node.junit) }}
    junit allowEmptyResults: true, testResults: '{{ $node.junit }}'
    {{- end }}
    {{- if not (empty $node.artifacts) }}
    archiveArtifacts allowEmptyArchive: true, artifacts: '
      {{- if kindIs "slice" $node.artifacts -}}
        {{ $node.artifacts | join "," }}
      {{- else -}}
        {{ $node.artifacts }}
      {{- end -}}
    '
    {{- end }}
}
{{- end -}}

{{- define "node_tasks" -}}
    {{- $node := . -}}
{{- if $node.parallel -}}
stage('{{ include "node_label" $node }}') {
    parallel(
        {{- range $i, $task := $node.tasks }}{{ if $i }},{{ end }}
            {{- include "node" (dict "node" (mergeOverwrite (dict "warn" $node.warn) $task) "parallel_task" true) | trim | nindent 8 }}
        {{- end }}
    )
}
{{- else -}}
    {{- range $i, $task := $node.tasks }}
        {{- include "node" (dict "node" (mergeOverwrite (dict "warn" $node.warn) $task)) -}}
    {{- end -}}
{{- end -}}
{{- end -}}

{{- define "node_shell" -}}
    {{- $node := . -}}
stage('{{ include "node_label" $node }}') {
    {{- if $node.warn }}
    warnError('{{ include "node_label" $node }}') {
        sh '''
            {{ $node.shell }}
        '''
    }
    {{- else }}
    sh '''
        {{ $node.shell }}
    '''
    {{- end }}
}
{{- end -}}

{{- define "node_label" -}}
    {{- $node := . -}}
    {{- if not (empty $node.label) -}}
        {{- $node.label -}}
    {{- else if not (empty $node.app) -}}
        {{- $node.app | title -}}
    {{- else if and (not (empty $node.shell)) (regexMatch "^make .+@integration$" $node.shell) -}}
        {{- (regexReplaceAll "^make (.+)@integration$" $node.shell "${1}") | replace "." " - " | title -}}
    {{- else -}}
        Task
    {{- end -}}
{{- end -}}

#!/usr/bin/env groovy

{{- if not .Vars.integration }}

stage('¯\\_(ツ)_/¯') {
    echo 'Because testing is doubting...'
}

{{- else }}

def app = env.JOB_NAME.split('/')[1].replaceAll('[^a-zA-Z0-9-]', '-')
def appCache = env.XDG_CACHE_HOME ? "${XDG_CACHE_HOME}" : '/home/docker/.cache'
def hash

podTemplate(
    inheritFrom: 'buildkit',
    label: 'buildkit',
) {
    node('buildkit') {
        stage('System') {
            checkout scm
            container('buildkit') {
                hash = sh(label: 'Get hash', script: 'find .manala -type f -exec md5sum {} + | LC_ALL=C sort | md5sum', returnStdout: true).take(8)
                if (
                    sh(label: 'Check system image', script: """
                        wget \
                            --spider -q \
                            http://${env.DOCKER_REGISTRY_PUSH}/v2/app/manifests/${app}-${hash}
                    """, returnStatus: true) != 0
                ) {
                    sh label: 'Build system image', script: """
                        buildctl build \
                            --frontend dockerfile.v0 \
                            --local context=.manala \
                            --local dockerfile=.manala \
                            --export-cache type=registry,ref=${env.DOCKER_REGISTRY_PUSH}/app:cache,mode=max \
                            --import-cache type=registry,ref=${env.DOCKER_REGISTRY_PUSH}app:cache \
                            --output type=image,name=${env.DOCKER_REGISTRY_PUSH}/app:${app}-${hash},push=true
                    """
                }
            }
        }
    }
}

podTemplate(
    inheritFrom: 'app',
    label: "app-${app}-${hash}",
    containers: [
        containerTemplate(
            name: 'app',
            image: "${env.DOCKER_REGISTRY_PULL}/app:${app}-${hash}",
            command: 'sleep',
            args: '9999999',
        ),
        {{- if .Vars.system.mysql.version -}}
        {{- $mysql := .Vars.system.mysql }}
        containerTemplate(
            name: 'mysql',
            image: 'mysql:{{ $mysql.version }}',
            envVars: [
                envVar(key: 'MYSQL_ALLOW_EMPTY_PASSWORD', value: 'yes')
            ]
        ),
        {{- else if .Vars.system.mariadb.version -}}
        {{- $mariadb := .Vars.system.mariadb }}
        containerTemplate(
            name: 'mariadb',
            image: 'mariadb:{{ $mariadb.version }}',
            envVars: [
                envVar(key: 'MYSQL_ALLOW_EMPTY_PASSWORD', value: 'yes')
            ]
        ),
        {{- end }}
        {{- if .Vars.system.elasticsearch.version -}}
        {{- $elasticsearch := mergeOverwrite (dict "plugins" list) .Vars.system.elasticsearch }}
        containerTemplate(
            name: 'elasticsearch',
            image: 'docker.elastic.co/elasticsearch/elasticsearch:{{ include "elasticsearch_version" $elasticsearch }}',
            envVars: [
                envVar(key: 'discovery.type', value: 'single-node')
            ],
            command: 'sh -c "
                {{- range $plugin := $elasticsearch.plugins }}elasticsearch-plugin install --batch --verbose {{ $plugin }} && {{ end -}}
                exec docker-entrypoint.sh"'
        ),
        {{- end }}
    ]
) {
    node("app-${app}-${hash}") {
        stage('Setup') {
            checkout scm
            {{- if or .Vars.system.mysql.version .Vars.system.mariadb.version }}
            // Setup MySQL/MariaDB service
            // - Wait until service is up
            // - Drop databases
            container('{{ if .Vars.system.mysql.version }}mysql{{ else }}mariadb{{ end }}') {
                sh label: 'Setup MySQL/MariaDB service', script: '''
                    while ! mysqladmin ping --host 0.0.0.0 --silent; do
                        sleep 0.25
                    done
                    for database in $(mysql --execute "SHOW DATABASES" | egrep --invert-match "Database|mysql|information_schema|performance_schema"); do
                      mysql --execute "DROP DATABASE ${database}"
                    done
                '''
            }
            {{- end }}
            {{- if .Vars.system.elasticsearch.version }}
            {{- $elasticsearch := .Vars.system.elasticsearch }}
            // Setup Elasticsearch service
            // - Wait until service is up
            // - Delete indexes
            container('elasticsearch') {
                sh label: 'Setup Elasticsearch service', script: '''
                    while ! [ $(curl --write-out %{http_code} --silent --output /dev/null http://127.0.0.1:9200/_cat/health?h=st) = 200 ]; do
                        sleep 0.25
                    done
                    curl --silent --request DELETE http://127.0.0.1:9200/_all
                '''
            }
            {{- end }}
        }
        container('app') {
            withEnv(["XDG_CACHE_HOME=${appCache}/app"]) {
                {{- include "node" (dict "node" .Vars.integration) | trim | nindent 16 }}
            }
        }
    }
}

{{- end }}
