FROM debian:{{ include "debian_release" .Vars.system }}-slim

LABEL maintainer="Elao <contact@elao.com>"

##########
# System #
##########

# The 'container' environment variable tells systemd that it's running inside a
# Docker container environment.
# It's also internally used for checking we're running inside a container too.
ENV container="docker"

RUN \
    # Disable irrelevants apt-key warnings
    export APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE="1" \
    # Disable all debian user interaction
    && export DEBIAN_FRONTEND="noninteractive" \
    && apt-get update \
    && apt-get install --yes --no-install-recommends \
        bash bash-completion \
        apt-utils apt-transport-https \
        ca-certificates \
        procps \
        curl \
        make \
        less \
        vim-tiny \
        gnupg2 dirmngr \
        openssh-client \
        sudo \
        git \
        rsync \
    # Srv
    && mkdir -p /srv \
    && chmod 777 /srv \
    # User
    && adduser --disabled-password --gecos "" docker \
    # Bash
    && sed -i 's/^#force_color_prompt=yes/force_color_prompt=yes/' /home/docker/.bashrc \
    # Sudo
    && echo "docker ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/docker \
    # Ansible
    && echo "deb http://ppa.launchpad.net/ansible/ansible/ubuntu {{ include "ubuntu_release" .Vars.system }} main" > /etc/apt/sources.list.d/ansible.list \
    && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 93C4A3FD7BB9C367 \
    && apt-get update \
    && apt-get install --yes --no-install-recommends \
        ansible

COPY etc/ssh_config /etc/ssh/ssh_config

ENV \
    ANSIBLE_GATHER_SUBSET="all,!hardware" \
    ANSIBLE_STDOUT_CALLBACK="skippy" \
    ANSIBLE_RETRY_FILES_ENABLED="0" \
    ANSIBLE_CACHE_PLUGIN="jsonfile" \
    ANSIBLE_SSH_PIPELINING="1"

COPY bin/entrypoint /usr/local/bin/entrypoint

ENTRYPOINT ["/usr/local/bin/entrypoint"]

WORKDIR /srv/app

{{- if .Vars.system.php.version }}
{{- $php := .Vars.system.php }}

#######
# Php #
#######

RUN \
    # Disable irrelevants apt-key warnings
    export APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE="1" \
    # Disable all debian user interaction
    && export DEBIAN_FRONTEND="noninteractive" \
    && echo "deb https://packages.sury.org/php/ {{ include "debian_release" .Vars.system }} main" > /etc/apt/sources.list.d/php.list \
    && curl --silent --location --show-error https://packages.sury.org/php/apt.gpg \
        --output /etc/apt/trusted.gpg.d/php.gpg \
    && apt-get update \
    && apt-get install --yes --no-install-recommends \
        php{{ $php.version }}-cli \
        {{- range $extension := $php.extensions }}
        php{{ $php.version }}-{{ $extension }} \
        {{- end }}
    # Composer
    && apt-get install --yes --no-install-recommends \
        unzip \
    && curl --silent --location --show-error https://getcomposer.org/installer \
        | php -- --install-dir /usr/local/bin --filename composer

{{- end }}

{{- if .Vars.system.symfony.version }}
{{- $symfony := .Vars.system.symfony }}

###########
# Symfony #
###########

RUN \
    # Get latest version
    VERSION=`curl --silent --location --fail https://get.symfony.com/cli/LATEST` \
    && curl --silent --location --show-error https://github.com/symfony/cli/releases/download/v${VERSION}/symfony_linux_amd64.gz \
        --output - | gunzip > /usr/local/bin/symfony \
    && chmod +x /usr/local/bin/symfony

{{- end }}

{{- if .Vars.system.nodejs.version }}
{{- $nodejs := .Vars.system.nodejs }}

##########
# NodeJs #
##########

RUN \
    # Disable irrelevants apt-key warnings
    export APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE="1" \
    # Disable all debian user interaction
    && export DEBIAN_FRONTEND="noninteractive" \
    && echo "deb https://deb.nodesource.com/node_{{ $nodejs.version }}.x {{ include "debian_release" .Vars.system }} main" > /etc/apt/sources.list.d/node.list \
    && curl --silent --location --show-error https://deb.nodesource.com/gpgkey/nodesource.gpg.key \
        | apt-key add - \
    && echo "deb https://dl.yarnpkg.com/debian/ stable main" > /etc/apt/sources.list.d/yarn.list \
    && curl --silent --location --show-error https://dl.yarnpkg.com/debian/pubkey.gpg \
        | apt-key add - \
    && apt-get update \
    && apt-get install --yes --no-install-recommends \
        nodejs \
        yarn \
    && mkdir -p /usr/etc \
    && echo "cache=\${XDG_CACHE_HOME}/npm" > /usr/etc/npmrc

{{- end }}

{{- if .Vars.system.apt.packages }}
{{- $apt := .Vars.system.apt }}
{{- $apt_packages := list }}
{{- $apt_debs := list }}
{{- range $package := $apt.packages }}
    {{- if hasSuffix ".deb" $package }}
      {{- $apt_debs = append $apt_debs $package }}
    {{- else }}
      {{- $apt_packages = append $apt_packages $package }}
    {{- end }}
{{- end }}

#######
# Apt #
#######

RUN \
    # Disable irrelevants apt-key warnings
    export APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE="1" \
    # Disable all debian user interaction
    && export DEBIAN_FRONTEND="noninteractive"

    {{- if $apt_packages }} \
    && apt-get update \
    && apt-get install --yes --no-install-recommends \
      {{- $apt_packages | join " \\\n" | nindent 8 }}
    {{- end }}

    {{- if $apt_debs }} \
    && mkdir -p /tmp/_apt \
    {{- $apt_package := "" }}
    {{- range $deb := $apt_debs }}
    {{- $apt_package = printf "%s/%s" "/tmp/_apt" (base $deb) }}
    && curl --silent --location --show-error {{ $deb }} \
        --output {{ $apt_package }} \
    && dpkg --install --force-depends {{ $apt_package }} \
    && apt-get install --yes --fix-broken \
    {{- end }}
    && rm -Rf /tmp/_apt
    {{- end }}

{{- end }}

USER docker
