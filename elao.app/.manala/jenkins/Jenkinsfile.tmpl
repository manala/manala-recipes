{{- define "pod_label" -}}
    {{- $system := . -}}
    {{- $label := list "integration" "app" -}}
    {{- if $system.mysql.version -}}
        {{- $label = concat $label (list "mysql" $system.mysql.version) -}}
    {{- else if $system.mariadb.version -}}
        {{- $label = concat $label (list "mariadb" $system.mariadb.version) -}}
    {{- end -}}
    {{- regexReplaceAll "[^[:alnum:]-]" ($label | join "-") "-" -}}
{{- end -}}

{{- define "node" -}}
    {{- $node := mergeOverwrite (dict "warn" false) . -}}
    {{- $indent := 0 -}}
    {{- $indent_env := 0 -}}
    {{- $indent_dir := 0 -}}
    {{- $indent_junit := 0 -}}

    {{- /* --- Env / Open --- */ -}}
    {{- if hasKey $node "env" -}}
      {{- $indent_env = $indent -}}
      {{- $indent = (add $indent 4 | int) -}}
      {{- include "node_env_open" $node | nindent $indent_env -}}
    {{- end -}}

        {{- /* --- Dir / Open --- */ -}}
        {{- if hasKey $node "app" -}}
          {{- $indent_dir = $indent -}}
          {{- $indent = (add $indent 4 | int) -}}
          {{- include "node_dir_open" $node | nindent $indent_dir -}}
        {{- end -}}

            {{- /* --- Junit / Open --- */ -}}
            {{- if hasKey $node "junit" -}}
              {{- $indent_junit = $indent -}}
              {{- $indent = (add $indent 4 | int) -}}
              {{- include "node_junit_open" $node | nindent $indent_junit -}}
            {{- end -}}

                {{- if hasKey $node "tasks" -}}
                    {{- include "node_tasks" $node | trim | nindent $indent -}}
                {{- else if hasKey $node "shell" -}}
                    {{- include "node_shell" $node | nindent $indent -}}
                {{- end -}}

            {{- /* --- Junit / Close --- */ -}}
            {{- if hasKey $node "junit" }}
              {{- include "node_junit_close" $node | nindent $indent_junit }}
            {{- end -}}

        {{- /* --- Dir / Close --- */ -}}
        {{- if hasKey $node "app" }}
          {{- include "node_dir_close" $node | nindent $indent_dir }}
        {{- end -}}

    {{- /* --- Env / Close --- */ -}}
    {{- if hasKey $node "env" }}
      {{- include "node_env_close" $node | nindent $indent_env }}
    {{- end -}}

{{- end -}}

{{- define "node_env_open" -}}
    {{- $node := . -}}
    {{- $env := list -}}
withEnv([
    {{- range $key, $value := $node.env -}}
        {{- if not (kindIs "invalid" $value) -}}
            {{- $env = append $env (print "'" $key "=" ($value | toString) "'") -}}
        {{- end -}}
    {{- end -}}
    {{- $env | join ", " -}}
]) {
{{- end -}}

{{- define "node_env_close" -}}
}
{{- end -}}

{{- define "node_junit_open" -}}
try {
{{- end -}}

{{- define "node_junit_close" -}}
    {{- $node := . -}}
} finally {
    junit allowEmptyResults: true, testResults: '{{ $node.junit }}'
}
{{- end -}}

{{- define "node_dir_open" -}}
    {{- $node := . -}}
dir('{{ $node.app }}') {
{{- end -}}

{{- define "node_dir_close" -}}
}
{{- end -}}

{{- define "node_tasks" -}}
    {{- $node := . -}}
{{- if get $node "parallel" -}}
stage('{{- include "node_label" $node -}}') {
    parallel(
        {{- range $i, $task := $node.tasks }}{{ if $i }},{{ end }}
        '{{- include "node_label" $task -}}': {
            {{- include "node" (mergeOverwrite (dict "warn" $node.warn) $task) | trim | nindent 12 }}
        }{{ end }}
    )
}
{{- else -}}
    {{- range $i, $task := $node.tasks }}
        {{- include "node" (mergeOverwrite (dict "warn" $node.warn) $task) -}}
    {{- end -}}
{{- end -}}
{{- end -}}

{{- define "node_shell" -}}
    {{- $node := . -}}
stage('{{- include "node_label" $node -}}') {
    {{- if get $node "warn" }}
    warnError('{{- include "node_label" $node -}}') {
        sh '''
            {{ $node.shell }}
        '''
    }
    {{- else }}
    sh '''
        {{ $node.shell }}
    '''
    {{- end }}
}
{{- end -}}

{{- define "node_label" -}}
    {{- $node := . -}}
    {{- if hasKey $node "label" -}}
        {{- $node.label -}}
    {{- else if hasKey $node "app" -}}
        {{- $node.app | title -}}
    {{- else if and (hasKey $node "shell") (regexMatch "^make .+@integration$" (get $node "shell")) -}}
        {{- (regexReplaceAll "^make (.+)@integration$" $node.shell "${1}") | replace "." " - " | title -}}
    {{- else -}}
        Task
    {{- end -}}
{{- end -}}

#!/usr/bin/env groovy

podTemplate(
    inheritFrom: 'integration',
    label: '{{- include "pod_label" .Vars.system }}',
    containers: [
        containerTemplate(
            name: 'debug',
            image: 'debian:{{ include "debian_release" .Vars.system }}-slim',
            alwaysPullImage: false,
            ttyEnabled: true,
            command: 'cat'
        ),
        {{- if .Vars.system.mysql.version -}}
        {{- $mysql := .Vars.system.mysql }}
        containerTemplate(
            name: 'mysql',
            image: 'mysql:{{ $mysql.version }}',
            alwaysPullImage: false,
            envVars: [
                envVar(key: 'MYSQL_ALLOW_EMPTY_PASSWORD', value: 'yes')
            ]
        ),
        {{- else if .Vars.system.mariadb.version -}}
        {{- $mariadb := .Vars.system.mariadb }}
        containerTemplate(
            name: 'mariadb',
            image: 'mariadb:{{ $mariadb.version }}',
            alwaysPullImage: false,
            envVars: [
                envVar(key: 'MYSQL_ALLOW_EMPTY_PASSWORD', value: 'yes')
            ]
        ),
        {{- end }}
    ]
) {
    node('{{- include "pod_label" .Vars.system }}') {
        {{- if not .Vars.integration.tasks }}
        stage('¯\\_(ツ)_/¯') {
            echo 'Because testing is doubting...'
        }
        {{- else }}
        def appImage
        def appImageTag = 'integration:' + URLDecoder.decode("${BUILD_TAG}").replaceAll('[^\\w-]', '-')
        def appContainerEnv = env.XDG_CACHE_HOME ? " --env XDG_CACHE_HOME=${XDG_CACHE_HOME}" : ''
        def hostContainerId

        stage('Setup') {
            checkout scm
            // Build app image
            appImage = docker.build("${appImageTag}", '.manala/docker')
            // Get host docker container id
            hostContainerId = sh label: 'Get host docker container id', script: 'cat /proc/self/cgroup | head -1 | awk -F/ \'{print $NF}\'', returnStdout: true
            {{- if or .Vars.system.mysql.version .Vars.system.mariadb.version }}
            // MySQL/MariaDB service
            container('{{ if .Vars.system.mysql.version }}mysql{{ else }}mariadb{{ end }}') {
                sh label: 'MySQL/MariaDB service', script: '''
                    printf "\033[32mWait until service is up...\033[0m\n"
                    while ! mysqladmin ping --host 0.0.0.0 --silent; do
                        sleep 0.25
                    done
                    printf "\033[32mDrop databases...\033[0m\n"
                    for database in $(mysql --execute "SHOW DATABASES" | egrep --invert-match "Database|mysql|information_schema|performance_schema"); do
                      printf "\033[36m${database}\033[0m\n"
                      mysql --execute "DROP DATABASE ${database}"
                    done
                '''
            }
            {{- end }}
            }
            {{- end }}
        }

        try {
            appImage.inside("--network container:${hostContainerId}${appContainerEnv}") {
                {{- include "node" .Vars.integration | trim | nindent 16 }}
            }
        } finally {
            // Remove app docker image
            sh label: 'Remove app docker image', script: "docker rmi --no-prune ${appImageTag}"
        }
        {{- end }}
    }
}
