---

- name: setup > Create directory "{{ release.dir }}"
  shell: >
    rm --recursive --force {{ release.dir }}
    && mkdir -p {{ release.dir }}
  args:
    warn: false
  tags: log_failed

################
# Source - Git #
################

- name: git > Get "{{ release.source_repo }}" source repo url
  shell: >
    git config --get remote.origin.url
  args:
    chdir: "{{ release.source_repo }}"
  tags: log_failed
  register: __release_source_repo_url

- name: git > Get "{{ release.source_repo }}" source repo info
  git:
    repo: "{{ __release_source_repo_url.stdout }}"
    dest: "{{ release.source_repo }}"
    clone: false
    update: false
  register: __release_source_repo_info

- name: git > Export "{{ release.source_repo }}" source repo into "{{ release.dir }}"
  shell: >
    git archive HEAD
    | tar -x -C {{ release.dir }}
  args:
    chdir: "{{ release.source_repo }}"
  tags: log_failed

- name: Update release state
  set_fact:
    release: "{{ release | combine({
      'message':
        ansible_date_time.year ~ ansible_date_time.month ~ ansible_date_time.day ~ ansible_date_time.hour ~ ansible_date_time.minute ~ ansible_date_time.second
        ~ '\n'
        ~ 'Original commit: https://' ~ __release_source_repo_url.stdout | regex_replace(release_git_url_regex, '\\g<host>/\\g<user>/\\g<repository>') ~ '/commit/' ~ __release_source_repo_info.after
    }) }}"

#########
# Tasks #
#########

- name: release > Execute tasks
  include_tasks: task/{{ item.task }}.yml
  loop: "{{ query('release_tasks', release.tasks) }}"
  when: item.when

###########
# Exclude #
###########

- name: release > Exclude content
  shell: >
    rm --recursive --force {{ [release.working_dir, item] | join('/') }}
  args:
    warn: false
  tags: log_failed
  loop: "{{ release.exclude }}"

#####################
# Destination - Git #
#####################

- name: git > Initialize "{{ release.repo }}" destination repo on version "{{ release.version }}"
  shell: >
    git init
    && git checkout -b {{ release.version }}
    && git remote add origin {{ release.repo }}
    && git fetch
    && (
      git show-ref -q origin/{{ release.version }} ; rc=$? ;
      if [ $rc -eq 0 -o $rc -eq 1 ] ; then
        if [ $rc -eq 0 ] ; then
          git update-ref HEAD origin/{{ release.version }} ;
        fi ;
      else
        return $rc ;
      fi
    )
  args:
    chdir: "{{ release.working_dir }}"
  tags: log_failed

- name: git > Include all content
  shell: >
    git add --force --all
  args:
    chdir: "{{ release.working_dir }}"
  when: release.include | length == 0
  tags: log_failed

- name: git > Include content
  shell: >
    git add --force "{{ item }}"
  args:
    chdir: "{{ release.working_dir }}"
  loop: "{{ release.include }}"
  tags: log_failed

- name: git > Commit release
  shell: >
    git commit -m "{{ release.message }}" --allow-empty
  args:
    chdir: "{{ release.working_dir }}"
  tags: log_failed

- name: git > Push "{{ release.version }}" release
  shell: >
    git push --set-upstream origin {{ release.version }}
    && git push origin HEAD
  args:
    chdir: "{{ release.working_dir }}"
  tags: log_failed
